---
layout: post
excerpt: Anteckningar från lektion 4
categories: 1dv022, javascript
---

När ett asynkront anrop görs skapar webbläsaren själv en ny tråd och gör anropen i bakgrunden. När processen avslutats, returneras
 resultatet till kön och kan köras. Det går inte att prioritera enskilda block i kön.

{% highlight javascript%}
function hello(){
    console.log("When do I say hello?");
}

function run(){
    setTimeout(hello, 0);

    console.log("I run...");
    console.log("...very fast");
}

run();

{% endhighlight %}

![JavaScript queue]({{ site.url }}/assets/img/js-queue.png)

Det finns dock ingen garanti att blocken körs direkt efter varandra; andra block kan komma emellan.

###Asynkron programmering

![Asynchronous programming]({{ site.url }}/assets/img/async-programming.png)

HTTP

Hypertext Transfer Protocol

Methods:

GET
POST
PATCH
PUT
DELETE

HTTP Status Codes

{% highlight javascript %}
var req = new XMLHttpRequest();

req.addEventListener("load", function(){
    // function to run when response from server
    console.log(req.responseText);
});

// behöver inte sätta "true" för att köra async
req.open("GET", "data.json");

// eftersom asynkront kommer send att returnera genast
req.send();
{% endhighlight %}
![Asynchronous request]({{ site.url }}/assets/img/async-request.png)

Utifrån detta rimligt att tänka sig att "svaret" körs från eventListenern?

###Callback pattern

Callback körs när ett event händer

{% highlight javascript %}
// ajax.js
// 1
module.exports.request = function(config, callback) {
    // 2
    var req = new XMLHttpRequest();

    // 3
    req.addEventListener("load", function(){

    // 4
        if (req.status >= 400) {
            callback(req.status);
        }
    // 5
        callback(null, req.responseText);
    });

    // 7
    req.open(config.method, config.url);
    req.send(null);
}

// app.js
var ajax = require("./ajax");

// 6, 8
ajax.request({method: "get", url: "data.json"}, function(error, response){

// 9
    if (error) {
        throw new Error("Network error" + error);
    }

// 10
    console.log(response);
});
{% endhighlight %}

1. XMLHttpRequest, open och send är satt i en egen modul
2. XMLHttpRequest skapas
3. EventListener läggs till på "load"
4. Om status >= 400 har något gått fel; callback anropas med req.status
5. Om det inte går fel, anropas callback: callback(null, req.responseText)
6. Metoden anropas med ett objekt (innehållande configinformation), som behandlas i 7
7. config.method och config.url anropas med req.open
8. callback: function(error, response).
9. Om det gick fel, kasta ett fel
10. Om det inte gick fel - logga resultatet


###Web storage API
Local storage: lagras lokalt länge
Session storage: lagras under den aktuella sessionen

{% highlight javascript %}
function populateStorage(){
    localStorage.setItem('bgcolor', document.getElementById(#id));
    //... more
    setStyles();
}

function setStyles(){
    var currentColor = localStorage.getItem('bgcolor');
}
{% endhighlight %}

##JSON in storage
{% highlight javascript %}
var style = {
    bgcolor: document.getElementById('bgcolor').value,
    font: document.getElementById('font').value,
    image: document.getElementById('image').value
}

// tar ett js-objekt, gör om till JSON-objekt
localStorage.setItem("style", JSON.stringify(style));

// ...

// hämtar style från localStorage och gör om till js-objekt igen
JSON.parse(localStorage.getItem("style"));
{% endhighlight %}
